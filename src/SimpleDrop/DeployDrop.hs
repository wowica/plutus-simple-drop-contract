{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications  #-}

module SimpleDrop.DeployDrop
    ( writeJSON
    , writeValidator
    , writeUnit
    , writeDropValidator
    ) where

import           Cardano.Api
import           Cardano.Api.Shelley   (PlutusScript (..))
import           Codec.Serialise       (serialise)
import           Data.Aeson            (encode)
import qualified Data.ByteString.Lazy  as LBS
import qualified Data.ByteString.Short as SBS
import           PlutusTx              (Data (..))
import qualified PlutusTx
import qualified Ledger
import qualified Plutus.V1.Ledger.Api  as Ledger

import           SimpleDrop.DropValidator

dataToScriptData :: Data -> ScriptData
dataToScriptData (Constr n xs) = ScriptDataConstructor n $ dataToScriptData <$> xs
dataToScriptData (Map xs)      = ScriptDataMap [(dataToScriptData x, dataToScriptData y) | (x, y) <- xs]
dataToScriptData (List xs)     = ScriptDataList $ dataToScriptData <$> xs
dataToScriptData (I n)         = ScriptDataNumber n
dataToScriptData (B bs)        = ScriptDataBytes bs

writeJSON :: PlutusTx.ToData a => FilePath -> a -> IO ()
writeJSON file = LBS.writeFile file . encode . scriptDataToJson ScriptDataJsonDetailedSchema . dataToScriptData . PlutusTx.toData

writeValidator :: FilePath -> Ledger.Validator -> IO (Either (FileError ()) ())
writeValidator file = writeFileTextEnvelope @(PlutusScript PlutusScriptV1) file Nothing . PlutusScriptSerialised . SBS.toShort . LBS.toStrict . serialise . Ledger.unValidatorScript

writeUnit :: IO ()
writeUnit = writeJSON "unit.json" ()

-- TODO: Read pub key hashes from a JSON file previously
-- generated by querying Blockfrost for a list of delegators aka snaphot.
aPkh :: [Ledger.PaymentPubKeyHash]
aPkh = [Ledger.PaymentPubKeyHash "b8a2874c3e45dc51acf3cc7cab350fdd66f028874f2f10d6dfc4ae7e"]

writeDropValidator :: IO (Either (FileError ()) ())
writeDropValidator = writeValidator "simple_drop.plutus" $ validator $ DropParam { delegators = aPkh } 
